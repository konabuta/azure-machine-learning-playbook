"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7484],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),m=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=m(r),f=a,g=u["".concat(p,".").concat(f)]||u[f]||s[f]||l;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var m=2;m<l;m++)o[m]=r[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3509:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=r(7462),a=(r(7294),r(3905));const l={slug:"mlflow-category",title:"MLflow Autolog with Category type for LightGBM",authors:{name:"Keita",title:"Senior Customer Engineer for AI/ML @Microsoft"},tags:["mlflow","scikit-learn","lightgbm"]},o=void 0,i={permalink:"/azure-machine-learning-playbook/blog/mlflow-category",editUrl:"https://github.com/konabuta/azure-machine-learning-playbook/blog/2022-07-20-mlflow-category.md",source:"@site/blog/2022-07-20-mlflow-category.md",title:"MLflow Autolog with Category type for LightGBM",description:"Introduction",date:"2022-07-20T00:00:00.000Z",formattedDate:"July 20, 2022",tags:[{label:"mlflow",permalink:"/azure-machine-learning-playbook/blog/tags/mlflow"},{label:"scikit-learn",permalink:"/azure-machine-learning-playbook/blog/tags/scikit-learn"},{label:"lightgbm",permalink:"/azure-machine-learning-playbook/blog/tags/lightgbm"}],readingTime:.865,truncated:!1,authors:[{name:"Keita",title:"Senior Customer Engineer for AI/ML @Microsoft"}],frontMatter:{slug:"mlflow-category",title:"MLflow Autolog with Category type for LightGBM",authors:{name:"Keita",title:"Senior Customer Engineer for AI/ML @Microsoft"},tags:["mlflow","scikit-learn","lightgbm"]},nextItem:{title:"Welcome",permalink:"/azure-machine-learning-playbook/blog/welcome"}},p={authorsImageUrls:[void 0]},m=[{value:"Introduction",id:"introduction",level:2},{value:"Preparation",id:"preparation",level:2},{value:"Library",id:"library",level:3},{value:"Data",id:"data",level:3},{value:"MLflow Experiment",id:"mlflow-experiment",level:3},{value:"DataFrameMapper",id:"dataframemapper",level:3},{value:"Scikit-learn Pipeline",id:"scikit-learn-pipeline",level:2},{value:"MLflow Autolog",id:"mlflow-autolog",level:2},{value:"MLflow UI",id:"mlflow-ui",level:2},{value:"Summary",id:"summary",level:2}],c={toc:m};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("h2",{id:"preparation"},"Preparation"),(0,a.kt)("h3",{id:"library"},"Library"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\nimport lightgbm as lgb\n")),(0,a.kt)("h3",{id:"data"},"Data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"base_df = pd.read_csv('../artifacts/sample-data/Titanic.csv')\nprint(base_df.dtypes) # check the data type of each column\n")),(0,a.kt)("h3",{id:"mlflow-experiment"},"MLflow Experiment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import mlflow\n\nmlflow.set_tracking_uri("./mlflowwork")\nmlflow.set_experiment(experiment_name = "mlflow-autolog-category-lightgbm")\nexperiment = mlflow.get_experiment_by_name("mlflow-autolog-category-lightgbm")\n')),(0,a.kt)("h3",{id:"dataframemapper"},"DataFrameMapper"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn_pandas import DataFrameMapper\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef to_category(x):\n    return x.astype('category')\n\ncategorical = ['Embarked', 'Sex']\nnumerical = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\ntrans = FunctionTransformer(to_category)\n\nmapper = DataFrameMapper([([col], trans) for col in categorical], input_df=True, df_out=True, default=None)\n")),(0,a.kt)("h2",{id:"scikit-learn-pipeline"},"Scikit-learn Pipeline"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"model_pipeline = Pipeline(\n    steps=[\n        ('preprocess', mapper), \n        ('model', lgb.LGBMClassifier())]\n    )\n")),(0,a.kt)("h2",{id:"mlflow-autolog"},"MLflow Autolog"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"with mlflow.start_run(experiment_id=experiment.experiment_id):\n    \n    mlflow.sklearn.autolog()\n\n    from sklearn.model_selection import train_test_split\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import MinMaxScaler\n\n    cols = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Sex', 'Survived']\n    df = base_df[cols].dropna().copy()\n\n    X_train, X_test, y_train, y_test = train_test_split(df.drop('Survived', axis=1), df['Survived'], test_size=0.3, random_state=123)\n    model_pipeline = Pipeline(\n        steps=[\n            ('preprocess', mapper), \n            ('model', lgb.LGBMClassifier())]\n        )\n    # fit model\n    model_pipeline.fit(X_train, y_train)\n\n")),(0,a.kt)("h2",{id:"mlflow-ui"},"MLflow UI"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mlflow ui  --backend-store-uri ./mlflowwork\n")),(0,a.kt)("h2",{id:"summary"},"Summary"))}s.isMDXComponent=!0}}]);